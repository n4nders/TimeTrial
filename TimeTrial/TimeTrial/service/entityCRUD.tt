<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#

string[] typeNames =  {
	"UserData"
};

#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Net;

using ServiceStack;
using ServiceStack.ServiceHost;
using ServiceStack.ServiceInterface;
using ServiceStack.Common.Web;

using MongoDB.Bson;
using MongoDB.Driver;
using MongoDB.Driver.Linq;

namespace TimeTrialResults
{
<#

foreach(string t in typeNames){
	#>

    public class <#= t #>CRUD
    {

		public const string DefaultTableName = "<#= t #>";

        public string TableName { get; set; }

        public <#= t #>CRUD() { this.TableName = DefaultTableName; }

        public <#= t #>CRUD(string TableName) { this.TableName = TableName; }

        public IList<<#= t #>> g()
        {
            var rtn = new List<<#= t #>>();

            var collection = DB.GetDatabase().GetCollection<<#= t #>>(TableName);
            rtn = collection.AsQueryable<<#= t #>>().ToList();

            return rtn;
        }
        public <#= t #> g(string id)
        {
            <#= t #> rtn = null;

			if (id != null)
			{
                var oId = new ObjectId(id);

                var collection = DB.GetDatabase().GetCollection<<#= t #>>(TableName);
                rtn = collection.AsQueryable<<#= t #>>().Where(o => o.Id == oId).FirstOrDefault();
			}

            return rtn;
        }

        public void cr(<#= t #> item)
        {
            var collection = DB.GetDatabase().GetCollection<<#= t #>>(TableName);
            collection.InsertOne(item);
        }

        public void u(string id, <#= t #> item)
        {
		    var filter = Builders<<#= t #>>.Filter.Eq(nameof(<#= t #>.Id), id);
            var collection = DB.GetDatabase().GetCollection<<#= t #>>(TableName).ReplaceOne(filter, item);
        }
        public void d(string id)
        {
			var filter = Builders<<#= t #>>.Filter.Eq(nameof(<#= t #>.Id), id);
            DB.GetDatabase().GetCollection<<#= t #>>(TableName).DeleteOne(filter);
        }

        public void dAll()
        {
			var filter = new BsonDocument();
            DB.GetDatabase().GetCollection<<#= t #>>(TableName).DeleteMany(filter);
        }

    }

<#
}

#>

}